{"ast":null,"code":"var _jsxFileName = \"/Users/ericathompson/workspace/bootcamp-students-unite-client/bootcampstudentsuniteclient/src/jobBoard/JobBoardForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { JobBoardContext } from \"./JobBoardProvider.js\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const JobBoardForm = props => {\n  _s();\n\n  const history = useHistory();\n  const {\n    createJobBoard,\n    updateJobBoard,\n    getJobBoards,\n    jobBoards\n  } = useContext(JobBoardContext);\n  const [jobBoardState, setJobBoard] = useState({});\n  /*\n    Since the input fields are bound to the values of\n    the properties of this state variable, you need to\n    provide some default values.\n    */\n\n  const [currentJobBoard, setCurrentJobBoard] = useState({\n    title: \"\",\n    description: \"\",\n    jobLink: \"\",\n    poster: localStorage.getItem(\"bc_token\")\n  });\n  const editMode = props.match.params.hasOwnProperty(\"jobBoardId\");\n\n  const getJobBoardInEditMode = () => {\n    if (editMode) {\n      const jobBoardId = parseInt(props.match.params.jobBoardId);\n      const selectedJobBoard = jobBoards.find(e => e.id === jobBoardId) || {};\n      setJobBoard(selectedJobBoard);\n    }\n  };\n  /*\n        Get jobBoard types on initialization so that the <select>\n        element presents jobBoard type choices to the user.\n    */\n\n\n  useEffect(() => {\n    getJobBoards();\n  }, []);\n  useEffect(() => {\n    getJobBoardInEditMode();\n  }, []);\n  /*\n        REFACTOR CHALLENGE START\n         Can you refactor this code so that all property\n        state changes can be handled with a single function\n        instead of five functions that all, largely, do\n        the same thing?\n         One hint: [jobBoard.target.title]\n    */\n\n  const changeJobBoardTitle = jobBoard => {\n    const newJobBoardState = { ...currentJobBoard\n    };\n    newJobBoardState.title = jobBoard.target.value;\n    setCurrentJobBoard(newJobBoardState);\n  };\n\n  const changeJobBoardDescriptionState = jobBoard => {\n    const newJobBoardState = { ...currentJobBoard\n    };\n    newJobBoardState.description = jobBoard.target.value;\n    setCurrentJobBoard(newJobBoardState);\n  };\n\n  const changeJobBoardJobLinkState = jobBoard => {\n    const newJobBoardState = { ...currentJobBoard\n    };\n    newJobBoardState.jobLink = jobBoard.target.value;\n    setCurrentJobBoard(newJobBoardState);\n  };\n\n  const constructUpdateJobBoard = () => {\n    const jobBoardId = parseInt(currentJobBoard.jobBoardId);\n\n    if (jobBoardId === 0) {\n      window.alert(\"Please select an jobBoard\");\n    } else {\n      if (editMode) {\n        // PUT\n        updateJobBoard({\n          id: jobBoardState.id,\n          title: jobBoardState.title,\n          description: jobBoardState.description,\n          jobLink: jobBoardState.jobLink,\n          poster: localStorage.getItem(\"bc_token\")\n        }).then(() => props.history.push(\"/jobboard\"));\n      }\n    }\n  };\n  /* REFACTOR CHALLENGE END */\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"jobBoardForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"jobBoardForm__title\",\n      children: \"Register a new group project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Job Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"title\",\n          title: \"title\",\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          value: currentJobBoard.title,\n          onChange: changeJobBoardTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          title: \"description\",\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          value: currentJobBoard.description,\n          onChange: changeJobBoardDescriptionState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"jobLink\",\n          children: \" What is the Job Link for this Job? \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          title: \"jobLink\",\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          value: currentJobBoard.jobLink,\n          onChange: changeJobBoardJobLinkState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: evt => {\n        // Group Project form from being submitted\n        evt.preventDefault();\n        const jobBoard = {\n          title: currentJobBoard.title,\n          description: currentJobBoard.description,\n          project_manager: localStorage.getItem(\"bc_token\"),\n          jobLink: currentJobBoard.jobLink,\n          poster: localStorage.getItem(\"bc_token\")\n        }; // Send POST request to your API\n\n        createJobBoard(jobBoard).then(() => history.push(\"/jobboard\"));\n      },\n      className: \"btn btn-primary\",\n      children: \"Create Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: evt => {\n        evt.preventDefault();\n        constructUpdateJobBoard();\n      },\n      className: \"btn btn-primary\",\n      children: editMode ? \"Save Updates\" : \"Edit JobBoard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobBoardForm, \"i7sC9O/Kd8S9s85k1YIeYcImEWw=\", false, function () {\n  return [useHistory];\n});\n\n_c = JobBoardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobBoardForm\");","map":{"version":3,"sources":["/Users/ericathompson/workspace/bootcamp-students-unite-client/bootcampstudentsuniteclient/src/jobBoard/JobBoardForm.js"],"names":["React","useContext","useState","useEffect","JobBoardContext","useHistory","JobBoardForm","props","history","createJobBoard","updateJobBoard","getJobBoards","jobBoards","jobBoardState","setJobBoard","currentJobBoard","setCurrentJobBoard","title","description","jobLink","poster","localStorage","getItem","editMode","match","params","hasOwnProperty","getJobBoardInEditMode","jobBoardId","parseInt","selectedJobBoard","find","e","id","changeJobBoardTitle","jobBoard","newJobBoardState","target","value","changeJobBoardDescriptionState","changeJobBoardJobLinkState","constructUpdateJobBoard","window","alert","then","push","evt","preventDefault","project_manager"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { JobBoardContext } from \"./JobBoardProvider.js\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const JobBoardForm = (props) => {\n  const history = useHistory();\n  const { createJobBoard, updateJobBoard, getJobBoards, jobBoards } =\n    useContext(JobBoardContext);\n\n  const [jobBoardState, setJobBoard] = useState({});\n  /*\n    Since the input fields are bound to the values of\n    the properties of this state variable, you need to\n    provide some default values.\n    */\n  const [currentJobBoard, setCurrentJobBoard] = useState({\n    title: \"\",\n    description: \"\",\n    jobLink: \"\",\n    poster: localStorage.getItem(\"bc_token\"),\n  });\n  const editMode = props.match.params.hasOwnProperty(\"jobBoardId\");\n\n  const getJobBoardInEditMode = () => {\n    if (editMode) {\n      const jobBoardId = parseInt(props.match.params.jobBoardId);\n      const selectedJobBoard = jobBoards.find((e) => e.id === jobBoardId) || {};\n      setJobBoard(selectedJobBoard);\n    }\n  };\n  /*\n        Get jobBoard types on initialization so that the <select>\n        element presents jobBoard type choices to the user.\n    */\n  useEffect(() => {\n    getJobBoards();\n  }, []);\n\n  useEffect(() => {\n    getJobBoardInEditMode();\n  }, []);\n  /*\n        REFACTOR CHALLENGE START\n\n        Can you refactor this code so that all property\n        state changes can be handled with a single function\n        instead of five functions that all, largely, do\n        the same thing?\n\n        One hint: [jobBoard.target.title]\n    */\n  const changeJobBoardTitle = (jobBoard) => {\n    const newJobBoardState = { ...currentJobBoard };\n    newJobBoardState.title = jobBoard.target.value;\n    setCurrentJobBoard(newJobBoardState);\n  };\n\n  const changeJobBoardDescriptionState = (jobBoard) => {\n    const newJobBoardState = { ...currentJobBoard };\n    newJobBoardState.description = jobBoard.target.value;\n    setCurrentJobBoard(newJobBoardState);\n  };\n\n  const changeJobBoardJobLinkState = (jobBoard) => {\n    const newJobBoardState = { ...currentJobBoard };\n    newJobBoardState.jobLink = jobBoard.target.value;\n    setCurrentJobBoard(newJobBoardState);\n  };\n\n  const constructUpdateJobBoard = () => {\n    const jobBoardId = parseInt(currentJobBoard.jobBoardId);\n\n    if (jobBoardId === 0) {\n      window.alert(\"Please select an jobBoard\");\n    } else {\n      if (editMode) {\n        // PUT\n        updateJobBoard({\n          id: jobBoardState.id,\n          title: jobBoardState.title,\n          description: jobBoardState.description,\n          jobLink: jobBoardState.jobLink,\n          poster: localStorage.getItem(\"bc_token\"),\n        }).then(() => props.history.push(\"/jobboard\"));\n      }\n    }\n  };\n\n  /* REFACTOR CHALLENGE END */\n\n  return (\n    <form className=\"jobBoardForm\">\n      <h2 className=\"jobBoardForm__title\">Register a new group project</h2>\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Job Title: </label>\n          <input\n            type=\"title\"\n            title=\"title\"\n            required\n            autoFocus\n            className=\"form-control\"\n            value={currentJobBoard.title}\n            onChange={changeJobBoardTitle}\n          />\n        </div>\n      </fieldset>\n\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Description: </label>\n          <input\n            type=\"text\"\n            title=\"description\"\n            required\n            autoFocus\n            className=\"form-control\"\n            value={currentJobBoard.description}\n            onChange={changeJobBoardDescriptionState}\n          />\n        </div>\n      </fieldset>\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"jobLink\"> What is the Job Link for this Job? </label>\n          <input\n            type=\"text\"\n            title=\"jobLink\"\n            required\n            autoFocus\n            className=\"form-control\"\n            value={currentJobBoard.jobLink}\n            onChange={changeJobBoardJobLinkState}\n          />\n        </div>\n      </fieldset>\n\n      {/* You create the rest of the input fields for each jobBoard property */}\n\n      <button\n        type=\"submit\"\n        onClick={(evt) => {\n          // Group Project form from being submitted\n          evt.preventDefault();\n          const jobBoard = {\n            title: currentJobBoard.title,\n            description: currentJobBoard.description,\n            project_manager: localStorage.getItem(\"bc_token\"),\n            jobLink: currentJobBoard.jobLink,\n            poster: localStorage.getItem(\"bc_token\"),\n          };\n          // Send POST request to your API\n          createJobBoard(jobBoard).then(() => history.push(\"/jobboard\"));\n        }}\n        className=\"btn btn-primary\"\n      >\n        Create Project\n      </button>\n\n      <button\n        type=\"submit\"\n        onClick={(evt) => {\n          evt.preventDefault();\n          constructUpdateJobBoard();\n        }}\n        className=\"btn btn-primary\"\n      >\n        {editMode ? \"Save Updates\" : \"Edit JobBoard\"}\n      </button>\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}