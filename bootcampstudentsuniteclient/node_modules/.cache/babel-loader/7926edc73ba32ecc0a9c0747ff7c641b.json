{"ast":null,"code":"var _jsxFileName = \"/Users/ericathompson/workspace/bootcamp-students-unite-client/bootcampstudentsuniteclient/src/groupprojects/GroupProjectForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { GroupProjectContext } from \"./GroupProjectProvider.js\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GroupProjectForm = props => {\n  _s();\n\n  // utilize history\n  const history = useHistory();\n  const {\n    createGroupProject,\n    updateGroupProject,\n    getGroupProjectById,\n    groupProjects\n  } = useContext(GroupProjectContext);\n  const [groupProjectState, setGroupProject] = useState({});\n  /*\n    Since the input fields are bound to the values of\n    the properties of this state variable, you need to\n    provide some default values.\n    */\n\n  const [currentGroupProject, setCurrentGroupProject] = useState({\n    title: \"\",\n    numberOfGraduatesSignedUp: 1,\n    description: \"\",\n    estimatedTimeToCompletion: \"\",\n    gitHubLink: \"\",\n    project_manager: localStorage.getItem(\"bc_token\")\n  });\n  const editMode = props.match.params.hasOwnProperty(\"groupprojectId\");\n\n  const getGroupProjectInEditMode = () => {\n    if (editMode) {\n      const groupProjectId = parseInt(props.match.params.groupprojectId);\n      const selectedGroupProject = groupProjects.find(project => project.id === groupProjectId) || {};\n      setGroupProject(selectedGroupProject);\n      setCurrentGroupProject(selectedGroupProject);\n    }\n  };\n  /*\n        Get groupProject types on initialization so that the <select>\n        element presents groupProject type choices to the user.\n    */\n\n\n  useEffect(() => {\n    if (editMode) {\n      const projectId = parseInt(props.match.params.groupprojectId);\n      getGroupProjectById(projectId).then(res => setCurrentGroupProject(res));\n      getGroupProjectInEditMode();\n    }\n  }, []);\n  /*\n        REFACTOR CHALLENGE START\n         Can you refactor this code so that all property\n        state changes can be handled with a single function\n        instead of five functions that all, largely, do\n        the same thing?\n         One hint: [groupProject.target.title]\n    */\n\n  const changeGroupProjectTitle = event => {\n    const newGroupProjectState = { ...currentGroupProject\n    };\n    newGroupProjectState.title = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeNumberOfSignUps = event => {\n    const newGroupProjectState = { ...currentGroupProject\n    };\n    newGroupProjectState.numberOfGraduatesSignedUp = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeGroupProjectTimeToCompleteState = event => {\n    const newGroupProjectState = { ...currentGroupProject\n    };\n    newGroupProjectState.estimatedTimeToCompletion = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeGroupProjectDescriptionState = event => {\n    const newGroupProjectState = { ...currentGroupProject\n    };\n    newGroupProjectState.description = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeGroupProjectGitHubLinkState = event => {\n    const newGroupProjectState = { ...currentGroupProject\n    };\n    newGroupProjectState.gitHubLink = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const constructUpdateGroupProject = () => {\n    const groupProjectId = parseInt(currentGroupProject.id); // const number_of_graduates_signed_up = currentGroupProject.participants;\n    // let countofstudents = number_of_graduates_signed_up.length;\n    // console.log(countofstudents);\n\n    if (groupProjectId === 0) {\n      window.alert(\"Please select an group project\");\n    } else {\n      if (editMode) {\n        var _currentGroupProject$;\n\n        // PUT\n        updateGroupProject({\n          id: currentGroupProject.id,\n          title: currentGroupProject.title,\n          numberOfGraduatesSignedUp: (_currentGroupProject$ = currentGroupProject.participants) === null || _currentGroupProject$ === void 0 ? void 0 : _currentGroupProject$.length,\n          date: currentGroupProject.date,\n          description: currentGroupProject.description,\n          gitHubLink: currentGroupProject.github_link,\n          estimatedTimeToCompletion: currentGroupProject.estimated_time_to_completion,\n          project_manager: localStorage.getItem(\"bc_token\")\n        }).then(() => props.history.push(\"/\"));\n      }\n    }\n  };\n  /* REFACTOR CHALLENGE END */\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"groupProjectForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"groupProjectForm__title\",\n      children: editMode ? \"Update Project\" : \"Create New Group Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Group Project Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"title\",\n          name: \"title\",\n          placeholder: \"title\",\n          defaultValue: currentGroupProject.title,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          onChange: changeGroupProjectTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          placeholder: \"description\",\n          defaultValue: currentGroupProject.description,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          onChange: changeGroupProjectDescriptionState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"gitHubLink\",\n          children: [\" \", \"What is the GitHub Link for this project?\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"gitHubLink\",\n          placeholder: \"GitHub Link\",\n          defaultValue: currentGroupProject.github_link,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          onChange: changeGroupProjectGitHubLinkState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"estimatedTimeToCompletion\",\n          children: [\"How many weeks will this project take?\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"estimatedTimeToCompletion\",\n          placeholder: \"Estimated Time to Completion\",\n          defaultValue: currentGroupProject.estimated_time_to_completion,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          onChange: changeGroupProjectTimeToCompleteState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), !editMode ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: evt => {\n        // Group Project form from being submitted\n        evt.preventDefault();\n        const groupProject = {\n          title: currentGroupProject.title,\n          numberOfGraduatesSignedUp: parseInt(currentGroupProject.numberOfGraduatesSignedUp),\n          description: currentGroupProject.description,\n          estimatedTimeToCompletion: parseInt(currentGroupProject.estimatedTimeToCompletion),\n          gitHubLink: currentGroupProject.gitHubLink,\n          project_manager: localStorage.getItem(\"bc_token\")\n        }; // Send POST request to your API\n\n        createGroupProject(groupProject).then(() => history.push(\"/\"));\n      },\n      className: \"btn btn-primary\",\n      children: \"Create Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      onClick: evt => {\n        evt.preventDefault();\n        constructUpdateGroupProject();\n      },\n      className: \"btn btn-primary\",\n      children: \"Save Updates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GroupProjectForm, \"lhF70M0qQlnjJCHXEu25L5+qjcE=\", false, function () {\n  return [useHistory];\n});\n\n_c = GroupProjectForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupProjectForm\");","map":{"version":3,"sources":["/Users/ericathompson/workspace/bootcamp-students-unite-client/bootcampstudentsuniteclient/src/groupprojects/GroupProjectForm.js"],"names":["React","useContext","useState","useEffect","GroupProjectContext","useHistory","GroupProjectForm","props","history","createGroupProject","updateGroupProject","getGroupProjectById","groupProjects","groupProjectState","setGroupProject","currentGroupProject","setCurrentGroupProject","title","numberOfGraduatesSignedUp","description","estimatedTimeToCompletion","gitHubLink","project_manager","localStorage","getItem","editMode","match","params","hasOwnProperty","getGroupProjectInEditMode","groupProjectId","parseInt","groupprojectId","selectedGroupProject","find","project","id","projectId","then","res","changeGroupProjectTitle","event","newGroupProjectState","target","value","changeNumberOfSignUps","changeGroupProjectTimeToCompleteState","changeGroupProjectDescriptionState","changeGroupProjectGitHubLinkState","constructUpdateGroupProject","window","alert","participants","length","date","github_link","estimated_time_to_completion","push","evt","preventDefault","groupProject"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { GroupProjectContext } from \"./GroupProjectProvider.js\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const GroupProjectForm = (props) => {\n  // utilize history\n  const history = useHistory();\n  const {\n    createGroupProject,\n    updateGroupProject,\n    getGroupProjectById,\n    groupProjects,\n  } = useContext(GroupProjectContext);\n\n  const [groupProjectState, setGroupProject] = useState({});\n  /*\n    Since the input fields are bound to the values of\n    the properties of this state variable, you need to\n    provide some default values.\n    */\n  const [currentGroupProject, setCurrentGroupProject] = useState({\n    title: \"\",\n    numberOfGraduatesSignedUp: 1,\n    description: \"\",\n    estimatedTimeToCompletion: \"\",\n    gitHubLink: \"\",\n    project_manager: localStorage.getItem(\"bc_token\"),\n  });\n\n  const editMode = props.match.params.hasOwnProperty(\"groupprojectId\");\n\n  const getGroupProjectInEditMode = () => {\n    if (editMode) {\n      const groupProjectId = parseInt(props.match.params.groupprojectId);\n      const selectedGroupProject =\n        groupProjects.find((project) => project.id === groupProjectId) || {};\n      setGroupProject(selectedGroupProject);\n      setCurrentGroupProject(selectedGroupProject);\n    }\n  };\n\n  /*\n        Get groupProject types on initialization so that the <select>\n        element presents groupProject type choices to the user.\n    */\n  useEffect(() => {\n    if (editMode) {\n      const projectId = parseInt(props.match.params.groupprojectId);\n      getGroupProjectById(projectId).then((res) => setCurrentGroupProject(res));\n      getGroupProjectInEditMode();\n    }\n  }, []);\n\n  /*\n        REFACTOR CHALLENGE START\n\n        Can you refactor this code so that all property\n        state changes can be handled with a single function\n        instead of five functions that all, largely, do\n        the same thing?\n\n        One hint: [groupProject.target.title]\n    */\n  const changeGroupProjectTitle = (event) => {\n    const newGroupProjectState = { ...currentGroupProject };\n    newGroupProjectState.title = event.target.value;\n\n    setCurrentGroupProject(newGroupProjectState);\n  };\n  const changeNumberOfSignUps = (event) => {\n    const newGroupProjectState = { ...currentGroupProject };\n    newGroupProjectState.numberOfGraduatesSignedUp = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeGroupProjectTimeToCompleteState = (event) => {\n    const newGroupProjectState = { ...currentGroupProject };\n    newGroupProjectState.estimatedTimeToCompletion = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeGroupProjectDescriptionState = (event) => {\n    const newGroupProjectState = { ...currentGroupProject };\n    newGroupProjectState.description = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const changeGroupProjectGitHubLinkState = (event) => {\n    const newGroupProjectState = { ...currentGroupProject };\n    newGroupProjectState.gitHubLink = event.target.value;\n    setCurrentGroupProject(newGroupProjectState);\n  };\n\n  const constructUpdateGroupProject = () => {\n    const groupProjectId = parseInt(currentGroupProject.id);\n\n    // const number_of_graduates_signed_up = currentGroupProject.participants;\n    // let countofstudents = number_of_graduates_signed_up.length;\n    // console.log(countofstudents);\n\n    if (groupProjectId === 0) {\n      window.alert(\"Please select an group project\");\n    } else {\n      if (editMode) {\n        // PUT\n        updateGroupProject({\n          id: currentGroupProject.id,\n          title: currentGroupProject.title,\n          numberOfGraduatesSignedUp: currentGroupProject.participants?.length,\n          date: currentGroupProject.date,\n          description: currentGroupProject.description,\n          gitHubLink: currentGroupProject.github_link,\n          estimatedTimeToCompletion:\n            currentGroupProject.estimated_time_to_completion,\n          project_manager: localStorage.getItem(\"bc_token\"),\n        }).then(() => props.history.push(\"/\"));\n      }\n    }\n  };\n\n  /* REFACTOR CHALLENGE END */\n\n  return (\n    <form className=\"groupProjectForm\">\n      <h2 className=\"groupProjectForm__title\">\n        {editMode ? \"Update Project\" : \"Create New Group Project\"}\n      </h2>\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Group Project Title: </label>\n          <input\n            type=\"title\"\n            name=\"title\"\n            placeholder=\"title\"\n            defaultValue={currentGroupProject.title}\n            required\n            autoFocus\n            className=\"form-control\"\n            onChange={changeGroupProjectTitle}\n          />\n        </div>\n      </fieldset>\n      {/* <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"numberOfGraduatesSignedUp\">\n            Number of Graduates Signed Up:{\" \"}\n          </label>\n          <input\n            type=\"numberOfGraduatesSignedUp\"\n            name=\"numberOfGraduatesSignedUp\"\n            placeholder=\"Number of Graduates Signed Up\"\n            required\n            autoFocus\n            className=\"form-control\"\n            defaultValue={currentGroupProject.number_of_graduates_signedUp}\n            onChange={changeNumberOfSignUps}\n          />\n        </div>\n      </fieldset> */}\n\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Description: </label>\n          <input\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"description\"\n            defaultValue={currentGroupProject.description}\n            required\n            autoFocus\n            className=\"form-control\"\n            onChange={changeGroupProjectDescriptionState}\n          />\n        </div>\n      </fieldset>\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"gitHubLink\">\n            {\" \"}\n            What is the GitHub Link for this project?{\" \"}\n          </label>\n          <input\n            type=\"text\"\n            name=\"gitHubLink\"\n            placeholder=\"GitHub Link\"\n            defaultValue={currentGroupProject.github_link}\n            required\n            autoFocus\n            className=\"form-control\"\n            onChange={changeGroupProjectGitHubLinkState}\n          />\n        </div>\n      </fieldset>\n\n      <fieldset>\n        <div className=\"form-group\">\n          <label htmlFor=\"estimatedTimeToCompletion\">\n            How many weeks will this project take?{\" \"}\n          </label>\n          <input\n            type=\"text\"\n            name=\"estimatedTimeToCompletion\"\n            placeholder=\"Estimated Time to Completion\"\n            defaultValue={currentGroupProject.estimated_time_to_completion}\n            required\n            autoFocus\n            className=\"form-control\"\n            onChange={changeGroupProjectTimeToCompleteState}\n          />\n        </div>\n      </fieldset>\n\n      {/* You create the rest of the input fields for each groupProject property */}\n      {!editMode ? (\n        <button\n          type=\"submit\"\n          onClick={(evt) => {\n            // Group Project form from being submitted\n            evt.preventDefault();\n            const groupProject = {\n              title: currentGroupProject.title,\n              numberOfGraduatesSignedUp: parseInt(\n                currentGroupProject.numberOfGraduatesSignedUp\n              ),\n              description: currentGroupProject.description,\n              estimatedTimeToCompletion: parseInt(\n                currentGroupProject.estimatedTimeToCompletion\n              ),\n              gitHubLink: currentGroupProject.gitHubLink,\n              project_manager: localStorage.getItem(\"bc_token\"),\n            };\n            // Send POST request to your API\n            createGroupProject(groupProject).then(() => history.push(\"/\"));\n          }}\n          className=\"btn btn-primary\"\n        >\n          Create Project\n        </button>\n      ) : (\n        <button\n          type=\"submit\"\n          onClick={(evt) => {\n            evt.preventDefault();\n            constructUpdateGroupProject();\n          }}\n          className=\"btn btn-primary\"\n        >\n          Save Updates\n        </button>\n      )}\n    </form>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}