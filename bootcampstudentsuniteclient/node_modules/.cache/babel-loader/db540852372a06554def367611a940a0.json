{"ast":null,"code":"var _jsxFileName = \"/Users/ericathompson/workspace/bootcamp-students-unite-client/bootcampstudentsuniteclient/src/jobBoard/JobBoardProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const JobBoardContext = /*#__PURE__*/React.createContext();\nexport const JobBoardProvider = props => {\n  _s();\n\n  const [jobBoards, setJobBoards] = useState([]);\n  const [jobBoardTypes, setTypes] = useState([]);\n\n  const getJobBoards = () => {\n    return fetch(\"http://localhost:8000/jobboard\", {\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"bc_token\")}`\n      }\n    }).then(response => response.json()).then(setJobBoards);\n  };\n\n  const createJobBoard = jobBoard => {\n    return fetch(\"http://localhost:8000/jobboard\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"bc_token\")}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(jobBoard)\n    }).then(response => response.json()).then(getJobBoards);\n  };\n\n  const updateJobBoard = jobboard => {\n    return fetch(`http://localhost:8000/jobboard/${jobboard.id}`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"bc_token\")}`\n      }\n    }).then(response => response.json()).then(getJobBoards);\n  };\n\n  return /*#__PURE__*/_jsxDEV(JobBoardContext.Provider, {\n    value: {\n      jobBoards,\n      getJobBoards,\n      createJobBoard,\n      updateJobBoard,\n      jobBoardTypes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobBoardProvider, \"x8wjFQgeSLa3LFviffeG6UMHZT8=\");\n\n_c = JobBoardProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobBoardProvider\");","map":{"version":3,"sources":["/Users/ericathompson/workspace/bootcamp-students-unite-client/bootcampstudentsuniteclient/src/jobBoard/JobBoardProvider.js"],"names":["React","useState","JobBoardContext","createContext","JobBoardProvider","props","jobBoards","setJobBoards","jobBoardTypes","setTypes","getJobBoards","fetch","headers","Authorization","localStorage","getItem","then","response","json","createJobBoard","jobBoard","method","body","JSON","stringify","updateJobBoard","jobboard","id","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,MAAMC,eAAe,gBAAGF,KAAK,CAACG,aAAN,EAAxB;AAEP,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAAA;;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,aAAD,EAAgBC,QAAhB,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMS,YAAY,GAAG,MAAM;AACzB,WAAOC,KAAK,CAAC,gCAAD,EAAmC;AAC7CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,SAAQC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiC;AADlD;AADoC,KAAnC,CAAL,CAKJC,IALI,CAKEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALf,EAMJF,IANI,CAMCT,YAND,CAAP;AAOD,GARD;;AAUA,QAAMY,cAAc,GAAIC,QAAD,IAAc;AACnC,WAAOT,KAAK,CAAC,gCAAD,EAAmC;AAC7CU,MAAAA,MAAM,EAAE,MADqC;AAE7CT,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,SAAQC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiC,EADlD;AAEP,wBAAgB;AAFT,OAFoC;AAM7CO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf;AANuC,KAAnC,CAAL,CAQJJ,IARI,CAQEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARf,EASJF,IATI,CASCN,YATD,CAAP;AAUD,GAXD;;AAaA,QAAMe,cAAc,GAAIC,QAAD,IAAc;AACnC,WAAOf,KAAK,CAAE,kCAAiCe,QAAQ,CAACC,EAAG,EAA/C,EAAkD;AAC5DN,MAAAA,MAAM,EAAE,KADoD;AAE5DT,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,SAAQC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiC;AADlD;AAFmD,KAAlD,CAAL,CAMJC,IANI,CAMEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANf,EAOJF,IAPI,CAOCN,YAPD,CAAP;AAQD,GATD;;AAUA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,SADK;AAELI,MAAAA,YAFK;AAGLS,MAAAA,cAHK;AAILM,MAAAA,cAJK;AAKLjB,MAAAA;AALK,KADT;AAAA,cASGH,KAAK,CAACuB;AATT;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAlDM;;GAAMxB,gB;;KAAAA,gB","sourcesContent":["import React, { useState } from \"react\";\n\nexport const JobBoardContext = React.createContext();\n\nexport const JobBoardProvider = (props) => {\n  const [jobBoards, setJobBoards] = useState([]);\n  const [jobBoardTypes, setTypes] = useState([]);\n\n  const getJobBoards = () => {\n    return fetch(\"http://localhost:8000/jobboard\", {\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"bc_token\")}`,\n      },\n    })\n      .then((response) => response.json())\n      .then(setJobBoards);\n  };\n\n  const createJobBoard = (jobBoard) => {\n    return fetch(\"http://localhost:8000/jobboard\", {\n      method: \"POST\",\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"bc_token\")}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(jobBoard),\n    })\n      .then((response) => response.json())\n      .then(getJobBoards);\n  };\n\n  const updateJobBoard = (jobboard) => {\n    return fetch(`http://localhost:8000/jobboard/${jobboard.id}`, {\n      method: \"PUT\",\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"bc_token\")}`,\n      },\n    })\n      .then((response) => response.json())\n      .then(getJobBoards);\n  };\n  return (\n    <JobBoardContext.Provider\n      value={{\n        jobBoards,\n        getJobBoards,\n        createJobBoard,\n        updateJobBoard,\n        jobBoardTypes,\n      }}\n    >\n      {props.children}\n    </JobBoardContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}